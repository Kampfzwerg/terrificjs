{"version":3,"sources":["terrific.js"],"names":["root","factory","define","amd","exports","module","T","this","Application","ctx","config","Node","tmpConfig","document","_ctx","_sandbox","Sandbox","_modules","_id","application","_application","_config","_connectors","Module","sandbox","_events","Connector","_listeners","_connected","prototype","registerModules","modules","dispatch","fragment","createDocumentFragment","appendChild","forEach","call","querySelectorAll","mod","Utils","capitalize","camelize","getAttribute","trim","skins","split","map","skin","registerModule","id","bind","unregisterModules","hasOwnProperty","start","getPromise","Promise","resolve","promises","push","all","then","error","Error","stop","undefined","setAttribute","i","len","length","getModuleById","addModules","removeModules","tmpModules","Array","isArray","getConfig","getConfigParam","name","addConnector","connector","removeConnector","connectors","splice","handle","apply","arguments","callback","disconnect","on","addListener","event","listener","connect","once","off","removeListener","removeAllListeners","listeners","cb","emit","args","slice","hasListeners","str","substr","toUpperCase","concat","replace","$1"],"mappings":"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","file":"terrific.min.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.T = factory();\n  }\n}(this, function() {\n/*!\n * TerrificJS modularizes your frontend code by solely relying on naming conventions.\n * http://terrifically.org\n *\n * @copyright   Copyright (c) <%= gulp.template.today('yyyy') %> Remo Brunschwiler\n * @license     Licensed under MIT license\n * @version     <%= pkg.version %>\n */\n\n/**\n * @module T\n */\n\n/**\n * Responsible for application-wide issues such as the creation of modules.\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Application\n *\n * @constructor\n * @param {Node} ctx\n *      The context node\n * @param {Object} config\n *      The configuration\n */\n/* global Sandbox, Module, Utils */\nfunction Application(ctx, config) {\n\t// validate params\n\tif (!ctx && !config) {\n\t\t// both empty\n\t\tctx = document;\n\t\tconfig = {};\n\t}\n\telse if (config instanceof Node) {\n\t\t// reverse order of arguments\n\t\tvar tmpConfig = config;\n\t\tconfig = ctx;\n\t\tctx = tmpConfig;\n\t}\n\telse if (!(ctx instanceof Node) && !config) {\n\t\t// only config is given\n\t\tconfig = ctx;\n\t\tctx = document;\n\t}\n\telse if (ctx instanceof Node && !config) {\n\t\t// only ctx is given\n\t\tconfig = {};\n\t}\n\n\t/**\n\t * The context node.\n\t *\n\t * @property _ctx\n\t * @type Node\n\t */\n\tthis._ctx = ctx;\n\n\t/**\n\t * The sandbox to get the resources from.\n\t * The singleton is shared between all modules.\n\t *\n\t * @property _sandbox\n\t * @type Sandbox\n\t */\n\tthis._sandbox = new Sandbox(this, config);\n\n\t/**\n\t * Contains references to all modules on the page.\n\t *\n\t * @property _modules\n\t * @type Object\n\t */\n\tthis._modules = {};\n\n\t/**\n\t * The next unique module id to use.\n\t *\n\t * @property id\n\t * @type Number\n\t */\n\tthis._id = 1;\n}\n\n/**\n * Register modules within the context\n * Automatically registers all modules within the context,\n * as long as the modules use the naming conventions.\n *\n * @method registerModules\n * @param {Node} ctx\n *      The context node\n * @return {Object}\n *      A collection containing the registered modules\n */\nApplication.prototype.registerModules = function (ctx) {\n\tvar modules = {};\n\n\tctx = ctx || this._ctx;\n\n\tthis._sandbox.dispatch('t.register.start');\n\n\tvar fragment = document.createDocumentFragment();\n\tfragment.appendChild(ctx);\n\n\t[].forEach.call(fragment.querySelectorAll('[data-t-name]'), function (ctx) {\n\n\t\t/*\n\t\t * A module can have different data attributes.\n\t\t * See below for possible values.\n\t\t */\n\n\t\t/*\n\t\t * @config data-t-name=\"{mod-name}\"\n\t\t *\n\t\t * Indicates that a JavaScript module should be bound.\n\t\t * It can occur at most once.\n\t\t *\n\t\t * Example: data-t-name=\"basic\"\n\t\t */\n\n\t\t/*\n\t\t * @config data-t-skin=\"{skin-name}\"\n\t\t *\n\t\t * Indicates that the module Basic should be decorated by the JS skin Submarine. It can occur at most\n\t\t * once. Multiple skins should be comma-separated.\n\t\t *\n\t\t * Example: data-t-skin=\"submarine\"\n\t\t */\n\n\t\tvar mod = Utils.capitalize(Utils.camelize(ctx.getAttribute('data-t-name').trim()));\n\t\tvar skins = ctx.getAttribute('data-t-skin') ? ctx.getAttribute('data-t-skin').split(',') : [];\n\n\t\tskins = skins.map(function (skin) {\n\t\t\treturn Utils.capitalize(Utils.camelize(skin.trim()));\n\t\t});\n\n\t\tvar module = this.registerModule(ctx, mod, skins);\n\n\t\tif (module) {\n\t\t\tmodules[module.id] = module;\n\t\t}\n\t}.bind(this));\n\n\tthis._sandbox.dispatch('t.register.end');\n\n\treturn modules;\n};\n\n/**\n * Unregisters the modules given by the module instances.\n *\n * @method unregisterModules\n * @param {Object} modules\n *      A collection containing the modules to unregister\n */\nApplication.prototype.unregisterModules = function (modules) {\n\tmodules = modules || this._modules;\n\n\tthis._sandbox.dispatch('t.unregister.start');\n\n\t// unregister the given modules\n\tfor (var id in modules) {\n\t\tif (modules.hasOwnProperty(id)) {\n\t\t\tdelete this._modules[id];\n\t\t}\n\t}\n\n\tthis._sandbox.dispatch('t.unregister.end');\n};\n\n/**\n * Starts (intializes) the registered modules.\n *\n * @method start\n * @param {Object} modules\n *      A collection of modules to start\n * @return {Promise}\n *      The synchronize Promise\n */\nApplication.prototype.start = function (modules) {\n\tmodules = modules || this._modules;\n\n\tvar promises = [];\n\n\tthis._sandbox.dispatch('t.start');\n\n\t// start the modules\n\tfunction getPromise(id) {\n\t\treturn new Promise(function (resolve) {\n\t\t\tmodules[id].start(function() {\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n\n\tfor (var id in modules) {\n\t\tif (modules.hasOwnProperty(id)) {\n\t\t\tpromises.push(getPromise(id));\n\t\t}\n\t}\n\n\t// synchronize modules\n\tvar all = Promise.all(promises);\n\tall.then(function () {\n\t\tthis._sandbox.dispatch('t.sync');\n\t}.bind(this))\n\t\t.catch(function (error) {\n\t\t\tthrow Error('Synchronizing the modules failed: ' + error);\n\t\t});\n\n\treturn all;\n};\n\n/**\n * Stops the registered modules.\n *\n * @method stop\n * @param {Object} modules\n *      A collection of modules to stop\n */\nApplication.prototype.stop = function (modules) {\n\tmodules = modules || this._modules;\n\n\tthis._sandbox.dispatch('t.stop');\n\n\t// stop the modules\n\tfor (var id in modules) {\n\t\tif (modules.hasOwnProperty(id)) {\n\t\t\tmodules[id].stop();\n\t\t}\n\t}\n};\n\n/**\n * Registers a module.\n *\n * @method registerModule\n * @param {Node} ctx\n *      The context node\n * @param {String} mod\n *      The module name. It must match the class name of the module\n * @param {Array} skins\n *      A list of skin names. Each entry must match a class name of a skin\n * @return {Module}\n *      The reference to the registered module\n */\nApplication.prototype.registerModule = function (ctx, mod, skins) {\n\tvar modules = this._modules;\n\n\tmod = mod || undefined;\n\tskins = skins || [];\n\n\tif (mod && Module[mod]) {\n\t\t// assign the module a unique id\n\t\tvar id = this._id++;\n\t\tctx.setAttribute('data-t-id', id);\n\n\t\t// instantiate module\n\t\tmodules[id] = new Module[mod](ctx, this._sandbox);\n\n\t\t// decorate it\n\t\tfor(var i = 0, len = skins.length; i < len; i++) {\n\t\t\tvar skin = skins[i];\n\n\t\t\tif (Module[mod][skin]) {\n\t\t\t\tModule[mod][skin](modules[id]);\n\t\t\t}\n\t\t}\n\n\t\treturn modules[id];\n\t}\n\n\tthis._sandbox.dispatch('t.missing', ctx, mod, skins);\n\n\treturn null;\n};\n\n/**\n * Gets the appropriate module for the given ID.\n *\n * @method getModuleById\n * @param {int} id\n *      The module ID\n * @return {Module}\n *      The appropriate module\n */\nApplication.prototype.getModuleById = function (id) {\n\tif (this._modules[id] !== undefined) {\n\t\treturn this._modules[id];\n\t}\n\telse {\n\t\tthrow Error('The module with the id ' + id +\n\t\t' does not exist');\n\t}\n};\n\n/**\n * The sandbox is used as a central point to get resources from, add modules etc.\n * It is shared between all modules.\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Sandbox\n *\n * @constructor\n * @param {Application} application\n *      The application reference\n * @param {Object} config\n *      The configuration\n */\nfunction Sandbox(application, config) {\n\t/**\n\t * The application.\n\t *\n\t * @property _application\n\t * @type Application\n\t */\n\tthis._application = application;\n\n\t/**\n\t * The configuration.\n\t *\n\t * @property config\n\t * @type Object\n\t */\n\tthis._config = config;\n\n\t/**\n\t * Contains references to all module connectors.\n\t *\n\t * @property _connectors\n\t * @type Array\n\t */\n\tthis._connectors = [];\n}\n\n/**\n * Adds (register and start) all modules in the given context scope.\n *\n * @method addModules\n * @param {Node} ctx\n *      The context node\n * @return {Object}\n *      A collection containing the registered modules\n */\nSandbox.prototype.addModules = function (ctx) {\n\tvar modules = [],\n\t\tapplication = this._application;\n\n\tif (ctx instanceof Node) {\n\t\t// register modules\n\t\tmodules = application.registerModules(ctx);\n\n\t\t// start modules\n\t\tapplication.start(modules);\n\t}\n\n\treturn modules;\n};\n\n/**\n * Removes a module by module instances.\n * This stops and unregisters a module through a module instance.\n *\n * @method removeModules\n * @param {any} modules\n *      A collection of module to remove | Node context to look for registered modules in.\n * @return {Sandbox}\n */\nSandbox.prototype.removeModules = function (modules) {\n\tvar application = this._application;\n\n\tif (modules instanceof Node) {\n\t\t// get modules\n\t\tvar tmpModules = [];\n\n\t\tvar fragment = document.createDocumentFragment();\n\t\tfragment.appendChild(modules);\n\n\t\t[].forEach.call(fragment.querySelectorAll('[data-t-name]'), function (ctx) {\n\t\t\t// check for instance\n\t\t\tvar id = ctx.getAttribute('data-t-id');\n\n\t\t\tif (id !== undefined) {\n\t\t\t\tvar module = this.getModuleById(id);\n\n\t\t\t\tif (module) {\n\t\t\t\t\ttmpModules.push(module);\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this));\n\n\t\tmodules = tmpModules;\n\t}\n\n\tif (Array.isArray(modules)) {\n\t\t// stop modules – let the module clean itself\n\t\tapplication.stop(modules);\n\n\t\t// unregister modules – clean up the application\n\t\tapplication.unregisterModules(modules);\n\t}\n\n\treturn this;\n};\n\n/**\n * Gets the appropriate module for the given ID.\n *\n * @method getModuleById\n * @param {int} id\n *      The module ID\n * @return {Module}\n *      The appropriate module\n */\nSandbox.prototype.getModuleById = function (id) {\n\treturn this._application.getModuleById(id);\n};\n\n/**\n * Gets the application config.\n *\n * @method getConfig\n * @return {Object}\n *      The configuration object\n */\nSandbox.prototype.getConfig = function () {\n\treturn this._config;\n};\n\n/**\n * Gets an application config param.\n *\n * @method getConfigParam\n * @param {String} name\n *      The param name\n * @return {any}\n *      The appropriate configuration param\n */\nSandbox.prototype.getConfigParam = function (name) {\n\tvar config = this._config;\n\n\tif (config[name] !== undefined) {\n\t\treturn config[name];\n\t}\n\telse {\n\t\tthrow Error('The config param ' + name + ' does not exist');\n\t}\n};\n\n/**\n * Adds a connector instance.\n *\n * @method addConnector\n * @param {Connector} connector\n *      The connector\n * @return {Sandbox}\n */\nSandbox.prototype.addConnector = function (connector) {\n\tthis._connectors.push(connector);\n\treturn this;\n};\n\n/**\n * Removes a connector instance.\n *\n * @method addConnector\n * @param {Connector} connector\n *      The connector\n * @return {Sandbox}\n */\nSandbox.prototype.removeConnector = function (connector) {\n\tvar connectors = this._connectors;\n\tfor (var i = 0, len = connectors.length; i < len; i++) {\n\t\tif (connectors[i] === connector) {\n\t\t\tconnectors.splice(i, 1);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn this;\n};\n\n/**\n * Dispatches the event with the given arguments to the attached connectors.\n *\n * @method dispatch\n * @param {Mixed} ...\n * @return {Sandbox}\n */\nSandbox.prototype.dispatch = function () {\n\tvar connectors = this._connectors;\n\n\tfor(var i = 0, len = connectors.length; i < len; i++) {\n\t\tvar connector = connectors[i];\n\t\tconnector.handle.apply(connector, arguments);\n\t}\n\n\treturn this;\n};\n/**\n * Base class for the different modules.\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Module\n *\n * @constructor\n * @param {Node} ctx\n *      The context node\n * @param {Sandbox} sandbox\n *      The sandbox to get the resources from\n */\n/* global Connector */\nfunction Module(ctx, sandbox) {\n\t/**\n\t * Contains the context node.\n\t *\n\t * @property ctx\n\t * @type Node\n\t */\n\tthis._ctx = ctx;\n\n\t/**\n\t * The sandbox to get the resources from.\n\t *\n\t * @property _sandbox\n\t * @type Sandbox\n\t */\n\tthis._sandbox = sandbox;\n\n\t/**\n\t * The emitter.\n\t *\n\t * @property _events\n\t * @type Connector\n\t */\n\tthis._events = new Connector(sandbox);\n}\n\n/**\n * Template method to start the module.\n *\n * @method start\n * @param {Function} callback\n *      The synchronize callback\n */\nModule.prototype.start = function (callback) {\n\tcallback();\n};\n\n/**\n * Template method to stop the module.\n *\n * @method stop\n */\nModule.prototype.stop = function () {\n\tthis._events.disconnect();\n};\n\n/**\n * Responsible for inter-module communication.\n * Classic EventEmitter Api. Heavily inspired by https://github.com/component/emitter\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Connector\n *\n * @constructor\n *\n * @param {Sandbox} sandbox\n *      The sandbox instance\n */\nfunction Connector(sandbox) {\n\t/**\n\t * The listeners.\n\t *\n\t * @property _listeners\n\t * @type Object\n\t */\n\tthis._listeners = {};\n\n\t/**\n\t * The sandbox instance.\n\t *\n\t * @property _sandbox\n\t * @type Sandbox\n\t */\n\tthis._sandbox = sandbox;\n\n\t/**\n\t * Indicates whether the instance is connected to the sandbox.\n\t *\n\t * @property _connected\n\t * @type Boolean\n\t */\n\tthis._connected = false;\n}\n\n/**\n * Adds a listener for the given event.\n *\n * @method on\n * @param {String} event\n * @param {Function} listener\n * @return {Connector}\n */\nConnector.prototype.on = Connector.prototype.addListener = function (event, listener) {\n\tthis.connect();\n\n\t(this._listeners['$' + event] = this._listeners['$' + event] || []).push(listener);\n\treturn this;\n};\n\n/**\n * Adds a listener that will be invoked a single\n * time and automatically removed afterwards.\n *\n * @method once\n * @param {String} event\n * @param {Function} listener\n * @return {Connector}\n */\nConnector.prototype.once = function (event, listener) {\n\tthis.connect();\n\n\tfunction on() {\n\t\tthis.off(event, on);\n\t\tlistener.apply(this, arguments);\n\t}\n\n\ton.listener = listener;\n\tthis.on(event, on);\n\treturn this;\n};\n\n/**\n * Remove the given listener for the given event or all\n * registered listeners.\n *\n * @method off\n * @param {String} event\n * @param {Function} listener\n * @return {Connector}\n */\nConnector.prototype.off = Connector.prototype.removeListener = Connector.prototype.removeAllListeners = function (event, listener) {\n\t// all\n\tif (arguments.length === 0) {\n\t\tthis._listeners = {};\n\t\treturn this;\n\t}\n\n\t// specific event\n\tvar listeners = this._listeners['$' + event];\n\tif (!listeners) {\n\t\treturn this;\n\t}\n\n\t// remove all listeners\n\tif (arguments.length === 1) {\n\t\tdelete this._listeners['$' + event];\n\t\treturn this;\n\t}\n\n\t// remove specific listener\n\tvar cb;\n\tfor (var i = 0, len = listeners.length; i < len; i++) {\n\t\tcb = listeners[i];\n\t\tif (cb === listener || cb.listener === listener) {\n\t\t\tlisteners.splice(i, 1);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn this;\n};\n\n/**\n * Dispatches event to the sandbox.\n *\n * @method emit\n * @param {Mixed} ...\n * @return {Connector}\n */\nConnector.prototype.emit = function () {\n\tthis.connect();\n\n\t// dispatches event to the sandbox\n\tthis._sandbox.dispatch.apply(this._sandbox, arguments);\n\n\treturn this;\n};\n\n/**\n * Handles dispatched event from sandbox.\n *\n * @method handle\n * @param {String} event\n * @param {Mixed} ...\n * @return {Connector}\n */\nConnector.prototype.handle = function (event) {\n\tvar args = [].slice.call(arguments, 1),\n\t\tlisteners = this._listeners['$' + event];\n\n\tif (listeners) {\n\t\tlisteners = listeners.slice(0);\n\t\tfor (var i = 0, len = listeners.length; i < len; ++i) {\n\t\t\tlisteners[i].apply(this, args);\n\t\t}\n\t}\n\n\treturn this;\n};\n\n\n/**\n * Return array of listeners for the given event.\n *\n * @method listeners\n * @param {String} event\n * @return {Array}\n */\nConnector.prototype.listeners = function (event) {\n\treturn this._listeners['$' + event] || [];\n};\n\n/**\n * Check if this connector has listeners.\n *\n * @method hasListeners\n * @param {String} event\n * @return {Boolean}\n */\nConnector.prototype.hasListeners = function (event) {\n\treturn !!this.listeners(event).length;\n};\n\n/**\n * Connect instance to the sandbox.\n *\n * @method connect\n * @return {Connector}\n */\nConnector.prototype.connect = function () {\n\tif (!this._connected) {\n\t\tthis._sandbox.addConnector(this);\n\t\tthis._connected = true;\n\t}\n\n\treturn this;\n};\n\n/**\n * Disconnect instance from the sandbox.\n *\n * @method disconnect\n * @return {Connector}\n */\nConnector.prototype.disconnect = function () {\n\tif (this._connected) {\n\t\tthis._sandbox.removeConnector(this);\n\t\tthis._connected = false;\n\t}\n\n\treturn this;\n};\n\n\n/**\n * Utility functions.\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Utils\n * @static\n */\n/* jshint unused: false */\nvar Utils = {\n\t/**\n\t * Capitalizes the first letter of the given string.\n\t *\n\t * @method capitalize\n\t * @param {String} str\n\t *      The original string\n\t * @return {String}\n\t *      The capitalized string\n\t */\n\tcapitalize: function (str) {\n\t\treturn str.substr(0, 1).toUpperCase().concat(str.substr(1));\n\t},\n\n\t/**\n\t * Camelizes the given string.\n\t *\n\t * @method camelize\n\t * @param {String} str\n\t *      The original string\n\t * @return {String}\n\t *      The camelized string\n\t */\n\tcamelize: function (str) {\n\t\treturn str.replace(/(\\-[A-Za-z])/g, function ($1) {\n\t\t\treturn $1.toUpperCase().replace('-', '');\n\t\t});\n\t}\n};\n\n/* global Application, Sandbox, Module, Connector, Utils */\n/* jshint unused: false */\nvar T = {\n\tApplication: Application,\n\tSandbox: Sandbox,\n\tModule: Module,\n\tConnector: Connector,\n\tUtils: Utils\n};\nreturn T;\n}));\n"],"sourceRoot":"/source/"}