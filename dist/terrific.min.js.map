{"version":3,"sources":["terrific.js"],"names":["root","factory","define","amd","exports","module","T","this","Application","ctx","config","Node","tmpConfig","document","_ctx","_sandbox","Sandbox","_modules","_id","application","_application","_config","_connectors","Module","sandbox","_events","Connector","_listeners","_connected","prototype","registerModules","modules","dispatch","fragment","createDocumentFragment","appendChild","forEach","call","querySelectorAll","registerModule","getAttribute","id","bind","unregisterModules","hasOwnProperty","start","getPromise","Promise","resolve","promises","push","all","then","error","Error","stop","mod","skins","namespace","Utils","capitalize","camelize","isString","window","split","Array","isArray","isObject","map","skin","trim","setAttribute","i","len","length","getModuleById","undefined","addModules","removeModules","tmpModules","getConfig","getConfigParam","name","addConnector","connector","removeConnector","connectors","splice","handle","apply","arguments","callback","disconnect","on","addListener","event","listener","connect","once","off","removeListener","removeAllListeners","listeners","cb","emit","args","slice","hasListeners","str","substr","toUpperCase","concat","replace","$1","obj","Object","toString","version"],"mappings":"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","file":"terrific.min.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.T = factory();\n  }\n}(this, function() {\n/*!\n * TerrificJS modularizes your frontend code by solely relying on naming conventions.\n * http://terrifically.org\n *\n * @copyright   Copyright (c) 2015 Remo Brunschwiler\n * @license     Licensed under MIT license\n * @version     3.0.0-beta.1\n */\n\n/**\n * @module T\n */\n\n/**\n * Responsible for application-wide issues such as the creation of modules.\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Application\n *\n * @constructor\n * @param {Node} ctx\n *      The context node\n * @param {Object} config\n *      The configuration\n */\n/* global Sandbox, Module, Utils */\nfunction Application(ctx, config) {\n\t// validate params\n\tif (!ctx && !config) {\n\t\t// both empty\n\t\tctx = document;\n\t\tconfig = {};\n\t}\n\telse if (config instanceof Node) {\n\t\t// reverse order of arguments\n\t\tvar tmpConfig = config;\n\t\tconfig = ctx;\n\t\tctx = tmpConfig;\n\t}\n\telse if (!(ctx instanceof Node) && !config) {\n\t\t// only config is given\n\t\tconfig = ctx;\n\t\tctx = document;\n\t}\n\telse if (ctx instanceof Node && !config) {\n\t\t// only ctx is given\n\t\tconfig = {};\n\t}\n\n\t/**\n\t * The context node.\n\t *\n\t * @property _ctx\n\t * @type Node\n\t */\n\tthis._ctx = ctx;\n\n\t/**\n\t * The sandbox to get the resources from.\n\t * The singleton is shared between all modules.\n\t *\n\t * @property _sandbox\n\t * @type Sandbox\n\t */\n\tthis._sandbox = new Sandbox(this, config);\n\n\t/**\n\t * Contains references to all modules on the page.\n\t *\n\t * @property _modules\n\t * @type Object\n\t */\n\tthis._modules = {};\n\n\t/**\n\t * The next unique module id to use.\n\t *\n\t * @property id\n\t * @type Number\n\t */\n\tthis._id = 1;\n}\n\n/**\n * Register modules within the context\n * Automatically registers all modules within the context,\n * as long as the modules use the naming conventions.\n *\n * @method registerModules\n * @param {Node} ctx\n *      The context node\n * @return {Object}\n *      A collection containing the registered modules\n */\nApplication.prototype.registerModules = function (ctx) {\n\tvar modules = {};\n\n\tctx = ctx || this._ctx;\n\n\tthis._sandbox.dispatch('t.register.start');\n\n\tvar fragment = document.createDocumentFragment();\n\tfragment.appendChild(ctx);\n\n\t[].forEach.call(fragment.querySelectorAll('[data-t-name]'), function (ctx) {\n\n\t\t/*\n\t\t * A module can have different data attributes.\n\t\t * See below for possible values.\n\t\t */\n\n\t\t/*\n\t\t * @config data-t-name=\"{mod-name}\"\n\t\t *\n\t\t * Example: data-t-name=\"foo\"\n\t\t * Indicates that the module Foo should be bound.\n\t\t */\n\n\t\t/*\n\t\t * @config data-t-namespace=\"{namespace}\"\n\t\t *\n\t\t * Example: data-t-skin=\"App.Components\"\n\t\t * The namespace of the module. Optional.\n\t\t */\n\n\t\t/*\n\t\t * @config data-t-skin=\"{skin-name}\"\n\t\t *\n\t\t * Example: data-t-skin=\"bar\"\n\t\t * Indicates that the module Foo should be decorated by the skin Bar.\n\t\t * Multiple skins should be comma-separated. Optional.\n\t\t */\n\t\tvar module = this.registerModule(ctx, ctx.getAttribute('data-t-name'), ctx.getAttribute('data-t-skin'), ctx.getAttribute('data-t-namespace'));\n\n\t\tif (module) {\n\t\t\tmodules[module.id] = module;\n\t\t}\n\t}.bind(this));\n\n\tthis._sandbox.dispatch('t.register.end');\n\n\treturn modules;\n};\n\n/**\n * Unregisters the modules given by the module instances.\n *\n * @method unregisterModules\n * @param {Object} modules\n *      A collection containing the modules to unregister\n */\nApplication.prototype.unregisterModules = function (modules) {\n\tmodules = modules || this._modules;\n\n\tthis._sandbox.dispatch('t.unregister.start');\n\n\t// unregister the given modules\n\tfor (var id in modules) {\n\t\tif (modules.hasOwnProperty(id)) {\n\t\t\tdelete this._modules[id];\n\t\t}\n\t}\n\n\tthis._sandbox.dispatch('t.unregister.end');\n};\n\n/**\n * Starts (intializes) the registered modules.\n *\n * @method start\n * @param {Object} modules\n *      A collection of modules to start\n * @return {Promise}\n *      The synchronize Promise\n */\nApplication.prototype.start = function (modules) {\n\tmodules = modules || this._modules;\n\n\tvar promises = [];\n\n\tthis._sandbox.dispatch('t.start');\n\n\t// start the modules\n\tfunction getPromise(id) {\n\t\treturn new Promise(function (resolve) {\n\t\t\tmodules[id].start(function() {\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n\n\tfor (var id in modules) {\n\t\tif (modules.hasOwnProperty(id)) {\n\t\t\tpromises.push(getPromise(id));\n\t\t}\n\t}\n\n\t// synchronize modules\n\tvar all = Promise.all(promises);\n\tall.then(function () {\n\t\tthis._sandbox.dispatch('t.sync');\n\t}.bind(this))\n\t\t.catch(function (error) {\n\t\t\tthrow Error('Synchronizing the modules failed: ' + error);\n\t\t});\n\n\treturn all;\n};\n\n/**\n * Stops the registered modules.\n *\n * @method stop\n * @param {Object} modules\n *      A collection of modules to stop\n */\nApplication.prototype.stop = function (modules) {\n\tmodules = modules || this._modules;\n\n\tthis._sandbox.dispatch('t.stop');\n\n\t// stop the modules\n\tfor (var id in modules) {\n\t\tif (modules.hasOwnProperty(id)) {\n\t\t\tmodules[id].stop();\n\t\t}\n\t}\n};\n\n/**\n * Registers a module.\n *\n * @method registerModule\n * @param {Node} ctx\n *      The context node\n * @param {String} mod\n *      The module name. It must match the class name of the module\n * @param {Array} skins\n *      A list of skin names. Each entry must match a class name of a skin\n * @param {String} namespace\n *      The module namespace\n * @return {Module}\n *      The reference to the registered module\n */\nApplication.prototype.registerModule = function (ctx, mod, skins, namespace) {\n\tvar modules = this._modules;\n\n\t// validate params\n\tmod = Utils.capitalize(Utils.camelize(mod));\n\n\tif(Utils.isString(skins)) {\n\t\tif(window[skins]) {\n\t\t\t// skins param is the namespace\n\t\t\tnamespace = window[skins];\n\t\t\tskins = null;\n\t\t}\n\t\telse {\n\t\t\t// convert string to array\n\t\t\tskins = skins.split(',');\n\t\t}\n\t}\n\telse if(!Array.isArray(skins) && Utils.isObject(skins)) {\n\t\t// skins is the namespace object\n\t\tnamespace = skins;\n\t\tskins = null;\n\t}\n\n\tskins = skins || [];\n\tskins = skins.map(function (skin) {\n\t\treturn Utils.capitalize(Utils.camelize(skin.trim()));\n\t});\n\n\tnamespace = namespace || Module;\n\n\tif (namespace[mod]) {\n\t\t// assign the module a unique id\n\t\tvar id = this._id++;\n\t\tctx.setAttribute('data-t-id', id);\n\n\t\t// instantiate module\n\t\tmodules[id] = new namespace[mod](ctx, this._sandbox);\n\n\t\t// decorate it\n\t\tfor(var i = 0, len = skins.length; i < len; i++) {\n\t\t\tvar skin = skins[i];\n\n\t\t\tif (namespace[mod][skin]) {\n\t\t\t\tnamespace[mod][skin](modules[id]);\n\t\t\t}\n\t\t}\n\n\t\treturn modules[id];\n\t}\n\n\tthis._sandbox.dispatch('t.missing', ctx, mod, skins, namespace);\n\n\treturn null;\n};\n\n/**\n * Gets the appropriate module for the given ID.\n *\n * @method getModuleById\n * @param {int} id\n *      The module ID\n * @return {Module}\n *      The appropriate module\n */\nApplication.prototype.getModuleById = function (id) {\n\tif (this._modules[id] !== undefined) {\n\t\treturn this._modules[id];\n\t}\n\telse {\n\t\tthrow Error('The module with the id ' + id +\n\t\t' does not exist');\n\t}\n};\n\n/**\n * The sandbox is used as a central point to get resources from, add modules etc.\n * It is shared between all modules.\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Sandbox\n *\n * @constructor\n * @param {Application} application\n *      The application reference\n * @param {Object} config\n *      The configuration\n */\nfunction Sandbox(application, config) {\n\t/**\n\t * The application.\n\t *\n\t * @property _application\n\t * @type Application\n\t */\n\tthis._application = application;\n\n\t/**\n\t * The configuration.\n\t *\n\t * @property config\n\t * @type Object\n\t */\n\tthis._config = config;\n\n\t/**\n\t * Contains references to all module connectors.\n\t *\n\t * @property _connectors\n\t * @type Array\n\t */\n\tthis._connectors = [];\n}\n\n/**\n * Adds (register and start) all modules in the given context scope.\n *\n * @method addModules\n * @param {Node} ctx\n *      The context node\n * @return {Object}\n *      A collection containing the registered modules\n */\nSandbox.prototype.addModules = function (ctx) {\n\tvar modules = [],\n\t\tapplication = this._application;\n\n\tif (ctx instanceof Node) {\n\t\t// register modules\n\t\tmodules = application.registerModules(ctx);\n\n\t\t// start modules\n\t\tapplication.start(modules);\n\t}\n\n\treturn modules;\n};\n\n/**\n * Removes a module by module instances.\n * This stops and unregisters a module through a module instance.\n *\n * @method removeModules\n * @param {any} modules\n *      A collection of module to remove | Node context to look for registered modules in.\n * @return {Sandbox}\n */\nSandbox.prototype.removeModules = function (modules) {\n\tvar application = this._application;\n\n\tif (modules instanceof Node) {\n\t\t// get modules\n\t\tvar tmpModules = [];\n\n\t\tvar fragment = document.createDocumentFragment();\n\t\tfragment.appendChild(modules);\n\n\t\t[].forEach.call(fragment.querySelectorAll('[data-t-name]'), function (ctx) {\n\t\t\t// check for instance\n\t\t\tvar id = ctx.getAttribute('data-t-id');\n\n\t\t\tif (id !== undefined) {\n\t\t\t\tvar module = this.getModuleById(id);\n\n\t\t\t\tif (module) {\n\t\t\t\t\ttmpModules.push(module);\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this));\n\n\t\tmodules = tmpModules;\n\t}\n\n\tif (Array.isArray(modules)) {\n\t\t// stop modules – let the module clean itself\n\t\tapplication.stop(modules);\n\n\t\t// unregister modules – clean up the application\n\t\tapplication.unregisterModules(modules);\n\t}\n\n\treturn this;\n};\n\n/**\n * Gets the appropriate module for the given ID.\n *\n * @method getModuleById\n * @param {int} id\n *      The module ID\n * @return {Module}\n *      The appropriate module\n */\nSandbox.prototype.getModuleById = function (id) {\n\treturn this._application.getModuleById(id);\n};\n\n/**\n * Gets the application config.\n *\n * @method getConfig\n * @return {Object}\n *      The configuration object\n */\nSandbox.prototype.getConfig = function () {\n\treturn this._config;\n};\n\n/**\n * Gets an application config param.\n *\n * @method getConfigParam\n * @param {String} name\n *      The param name\n * @return {any}\n *      The appropriate configuration param\n */\nSandbox.prototype.getConfigParam = function (name) {\n\tvar config = this._config;\n\n\tif (config[name] !== undefined) {\n\t\treturn config[name];\n\t}\n\telse {\n\t\tthrow Error('The config param ' + name + ' does not exist');\n\t}\n};\n\n/**\n * Adds a connector instance.\n *\n * @method addConnector\n * @param {Connector} connector\n *      The connector\n * @return {Sandbox}\n */\nSandbox.prototype.addConnector = function (connector) {\n\tthis._connectors.push(connector);\n\treturn this;\n};\n\n/**\n * Removes a connector instance.\n *\n * @method addConnector\n * @param {Connector} connector\n *      The connector\n * @return {Sandbox}\n */\nSandbox.prototype.removeConnector = function (connector) {\n\tvar connectors = this._connectors;\n\tfor (var i = 0, len = connectors.length; i < len; i++) {\n\t\tif (connectors[i] === connector) {\n\t\t\tconnectors.splice(i, 1);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn this;\n};\n\n/**\n * Dispatches the event with the given arguments to the attached connectors.\n *\n * @method dispatch\n * @param {Mixed} ...\n * @return {Sandbox}\n */\nSandbox.prototype.dispatch = function () {\n\tvar connectors = this._connectors;\n\n\tfor(var i = 0, len = connectors.length; i < len; i++) {\n\t\tvar connector = connectors[i];\n\t\tconnector.handle.apply(connector, arguments);\n\t}\n\n\treturn this;\n};\n/**\n * Base class for the different modules.\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Module\n *\n * @constructor\n * @param {Node} ctx\n *      The context node\n * @param {Sandbox} sandbox\n *      The sandbox to get the resources from\n */\n/* global Connector */\nfunction Module(ctx, sandbox) {\n\t/**\n\t * Contains the context node.\n\t *\n\t * @property ctx\n\t * @type Node\n\t */\n\tthis._ctx = ctx;\n\n\t/**\n\t * The sandbox to get the resources from.\n\t *\n\t * @property _sandbox\n\t * @type Sandbox\n\t */\n\tthis._sandbox = sandbox;\n\n\t/**\n\t * The emitter.\n\t *\n\t * @property _events\n\t * @type Connector\n\t */\n\tthis._events = new Connector(sandbox);\n}\n\n/**\n * Template method to start the module.\n *\n * @method start\n * @param {Function} callback\n *      The synchronize callback\n */\nModule.prototype.start = function (callback) {\n\tcallback();\n};\n\n/**\n * Template method to stop the module.\n *\n * @method stop\n */\nModule.prototype.stop = function () {\n\tthis._events.disconnect();\n};\n\n/**\n * Responsible for inter-module communication.\n * Classic EventEmitter Api. Heavily inspired by https://github.com/component/emitter\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Connector\n *\n * @constructor\n *\n * @param {Sandbox} sandbox\n *      The sandbox instance\n */\nfunction Connector(sandbox) {\n\t/**\n\t * The listeners.\n\t *\n\t * @property _listeners\n\t * @type Object\n\t */\n\tthis._listeners = {};\n\n\t/**\n\t * The sandbox instance.\n\t *\n\t * @property _sandbox\n\t * @type Sandbox\n\t */\n\tthis._sandbox = sandbox;\n\n\t/**\n\t * Indicates whether the instance is connected to the sandbox.\n\t *\n\t * @property _connected\n\t * @type Boolean\n\t */\n\tthis._connected = false;\n}\n\n/**\n * Adds a listener for the given event.\n *\n * @method on\n * @param {String} event\n * @param {Function} listener\n * @return {Connector}\n */\nConnector.prototype.on = Connector.prototype.addListener = function (event, listener) {\n\tthis.connect();\n\n\t(this._listeners['$' + event] = this._listeners['$' + event] || []).push(listener);\n\treturn this;\n};\n\n/**\n * Adds a listener that will be invoked a single\n * time and automatically removed afterwards.\n *\n * @method once\n * @param {String} event\n * @param {Function} listener\n * @return {Connector}\n */\nConnector.prototype.once = function (event, listener) {\n\tthis.connect();\n\n\tfunction on() {\n\t\tthis.off(event, on);\n\t\tlistener.apply(this, arguments);\n\t}\n\n\ton.listener = listener;\n\tthis.on(event, on);\n\treturn this;\n};\n\n/**\n * Remove the given listener for the given event or all\n * registered listeners.\n *\n * @method off\n * @param {String} event\n * @param {Function} listener\n * @return {Connector}\n */\nConnector.prototype.off = Connector.prototype.removeListener = Connector.prototype.removeAllListeners = function (event, listener) {\n\t// all\n\tif (arguments.length === 0) {\n\t\tthis._listeners = {};\n\t\treturn this;\n\t}\n\n\t// specific event\n\tvar listeners = this._listeners['$' + event];\n\tif (!listeners) {\n\t\treturn this;\n\t}\n\n\t// remove all listeners\n\tif (arguments.length === 1) {\n\t\tdelete this._listeners['$' + event];\n\t\treturn this;\n\t}\n\n\t// remove specific listener\n\tvar cb;\n\tfor (var i = 0, len = listeners.length; i < len; i++) {\n\t\tcb = listeners[i];\n\t\tif (cb === listener || cb.listener === listener) {\n\t\t\tlisteners.splice(i, 1);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn this;\n};\n\n/**\n * Dispatches event to the sandbox.\n *\n * @method emit\n * @param {Mixed} ...\n * @return {Connector}\n */\nConnector.prototype.emit = function () {\n\tthis.connect();\n\n\t// dispatches event to the sandbox\n\tthis._sandbox.dispatch.apply(this._sandbox, arguments);\n\n\treturn this;\n};\n\n/**\n * Handles dispatched event from sandbox.\n *\n * @method handle\n * @param {String} event\n * @param {Mixed} ...\n * @return {Connector}\n */\nConnector.prototype.handle = function (event) {\n\tvar args = [].slice.call(arguments, 1),\n\t\tlisteners = this._listeners['$' + event];\n\n\tif (listeners) {\n\t\tlisteners = listeners.slice(0);\n\t\tfor (var i = 0, len = listeners.length; i < len; ++i) {\n\t\t\tlisteners[i].apply(this, args);\n\t\t}\n\t}\n\n\treturn this;\n};\n\n\n/**\n * Return array of listeners for the given event.\n *\n * @method listeners\n * @param {String} event\n * @return {Array}\n */\nConnector.prototype.listeners = function (event) {\n\treturn this._listeners['$' + event] || [];\n};\n\n/**\n * Check if this connector has listeners.\n *\n * @method hasListeners\n * @param {String} event\n * @return {Boolean}\n */\nConnector.prototype.hasListeners = function (event) {\n\treturn !!this.listeners(event).length;\n};\n\n/**\n * Connect instance to the sandbox.\n *\n * @method connect\n * @return {Connector}\n */\nConnector.prototype.connect = function () {\n\tif (!this._connected) {\n\t\tthis._sandbox.addConnector(this);\n\t\tthis._connected = true;\n\t}\n\n\treturn this;\n};\n\n/**\n * Disconnect instance from the sandbox.\n *\n * @method disconnect\n * @return {Connector}\n */\nConnector.prototype.disconnect = function () {\n\tif (this._connected) {\n\t\tthis._sandbox.removeConnector(this);\n\t\tthis._connected = false;\n\t}\n\n\treturn this;\n};\n\n\n/**\n * Utility functions.\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Utils\n * @static\n */\n/* jshint unused: false */\nvar Utils = {\n\t/**\n\t * Capitalizes the first letter of the given string.\n\t *\n\t * @method capitalize\n\t * @param {String} str\n\t *      The original string\n\t * @return {String}\n\t *      The capitalized string\n\t */\n\tcapitalize: function (str) {\n\t\treturn str.substr(0, 1).toUpperCase().concat(str.substr(1));\n\t},\n\n\t/**\n\t * Camelizes the given string.\n\t *\n\t * @method camelize\n\t * @param {String} str\n\t *      The original string\n\t * @return {String}\n\t *      The camelized string\n\t */\n\tcamelize: function (str) {\n\t\treturn str.replace(/(\\-[A-Za-z])/g, function ($1) {\n\t\t\treturn $1.toUpperCase().replace('-', '');\n\t\t});\n\t},\n\n\t/**\n\t * Check whether the given object is a string.\n\t *\n\t * @method isString\n\t * @param {Object} obj\n\t *      The object to check\n\t * @return {Boolean}\n\t */\n\tisString: function(obj) {\n\t\treturn Object.prototype.toString.call(obj) === '[object String]';\n\t},\n\n\t/**\n\t * Check whether the given param is an object.\n\t *\n\t * @method isObject\n\t * @param {Object} obj\n\t *      The object to check\n\t * @return {Boolean}\n\t */\n\n\tisObject : function (obj) {\n\t\treturn obj === Object(obj);\n\t}\n};\n\n/* global Application, Sandbox, Module, Connector, Utils */\n/* jshint unused: false */\nvar T = {\n\tApplication: Application,\n\tSandbox: Sandbox,\n\tModule: Module,\n\tConnector: Connector,\n\tUtils: Utils,\n\tversion: '3.0.0-beta.1'\n};\nreturn T;\n}));\n"],"sourceRoot":"/source/"}